c++ - style casts

struct base
{
	int a;
};

struct base2
{
	int b;
}

struct derived;
base2* f(derived* d)
{
	return (base2*)d;
}

struct derived:base, base2
{};

Это не сработает, так как в точке return не знает что derived наследуется от base2

cast -- это переинтерпритация битов. Если каст от derived к base, указатель скорее всего придется двигать, а в то же время у нас инкомплит тип и хрень

Касты:
static_cast<base2*>(d); static_cast -- не функция а какая-то хрень
Он кастует только нормально (касты, которые могут иметь смысл) к примеру числа в другие числа. Иначе это compile-time ошибка.
Он не позволит скастовать к говну.

const_cast<T*>(a). Снимает const. Надо использовать когда библиотека криво написана и там не const а нужен const.
Если изменить const, то может произойти все что угодно. 

short* b;
reinterpret_cast<int*>(b);
Касты между несвязанными типами. Это полнейшая хрень.

base2* c;
dynamic_cast <derived*> (c); Проверяет, корректен ли каст. Требуется, чтобы классы были полиморфными (хотя бы одна виртуальная функция), чтобы уметь определять тип
по объекту.
Обычно юзается так: if(base* b = dynamic_cast<base*> (c))
{
	
}